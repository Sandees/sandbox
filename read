# Databricks notebook source
%md
# MITRE ATT&CK SPL Query Analyzer - Table Version

Interactive UI to select MITRE techniques from your table and analyze SPL queries

# COMMAND ----------

%md
## Setup and Data Loading

# COMMAND ----------

from databricks.sdk import WorkspaceClient
from databricks.sdk.service.serving import ChatMessage, ChatMessageRole
import json
from pyspark.sql import functions as F

# Initialize workspace client
w = WorkspaceClient()

# Load your data table
df = spark.table("hive_metastore.default.uc_data_nanditha")

# Get list of all MITRE IDs for dropdown
mitre_ids = df.select("mitre_id").distinct().orderBy("mitre_id").collect()
mitre_id_list = [row.mitre_id for row in mitre_ids]

print(f"‚úÖ Loaded {df.count()} records from table")
print(f"üìä Found {len(mitre_id_list)} unique MITRE IDs")

# COMMAND ----------

%md
## Python Functions for Data Handling

# COMMAND ----------

def get_technique_data(mitre_id):
    """
    Get technique data for selected MITRE ID
    """
    try:
        # Query the table for the specific MITRE ID
        technique_row = df.filter(F.col("mitre_id") == mitre_id).first()
        
        if technique_row:
            return {
                "mitre_id": technique_row.mitre_id,
                "technique_name": technique_row.technique_name,
                "description": technique_row.description,
                "tactics": technique_row.tactics,
                "platforms": technique_row.platforms,
                "domain": technique_row.domain,
                "spl_query": technique_row.spl_query,
                "detection": technique_row.detection,
                "drill_down_spl": getattr(technique_row, 'drill_down_spl', '')
            }
        else:
            return {}
    except Exception as e:
        print(f"Error getting technique data: {e}")
        return {}

# COMMAND ----------

def analyze_technique_with_llm(mitre_id):
    """
    Analyze the selected technique with LLM
    """
    try:
        # Get the technique data
        technique_data = get_technique_data(mitre_id)
        
        if not technique_data:
            return "Error: Could not find technique data"
        
        # Build the system message
        system_msg = ChatMessage(role=ChatMessageRole.SYSTEM, content=(
            "You are a security-focused assistant. "
            "Your task is to review the provided SPL and drill down SPL query against the MITRE ATT&CK technique "
            "and tell what is not covered by SPL and any changes needed to fully detect that technique."
        ))
        
        # Build user content with the technique data
        user_content = f"""### MITRE ATT&CK Technique
Technique ID: {technique_data['mitre_id']}
Technique Name: {technique_data['technique_name']}
Description: {technique_data['description']}
Tactics: {technique_data['tactics']}
Platforms: {technique_data['platforms']}
Domain: {technique_data['domain']}

### SPL Query
{technique_data['spl_query']}

### SPL Drill Down Query
{technique_data.get('drill_down_spl', 'No drill down query available')}

### Detection Notes
{technique_data.get('detection', 'No detection notes available')}

Please analyze this SPL query and:
1. Tell me what is not covered by the SPL query for detecting this MITRE technique
2. Identify any mistakes or gaps in the current SPL
3. Suggest specific changes needed to fully detect this attack technique
4. Provide recommendations for improving detection coverage"""
        
        user_msg = ChatMessage(role=ChatMessageRole.USER, content=user_content)
        
        # Call the LLM (replace with your actual model name)
        response = w.serving_endpoints.query(
            name="databricks-meta-llama-3-70b-instruct",  # Replace with your model
            messages=[system_msg, user_msg],
            temperature=0.1,
            max_tokens=2048
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        return f"Error during LLM analysis: {str(e)}"

# COMMAND ----------

# Store analysis result in global variables to avoid string escaping issues
analysis_result = ""
selected_mitre_id = ""

def run_analysis_and_display(mitre_id):
    """
    Run analysis and store result globally
    """
    global analysis_result, selected_mitre_id
    selected_mitre_id = mitre_id
    print(f"üîç Starting LLM analysis for {mitre_id}...")
    analysis_result = analyze_technique_with_llm(mitre_id)
    print("‚úÖ Analysis complete")
    
    # Clean the result for safe JavaScript display
    clean_result = analysis_result.replace('\\', '\\\\').replace('`', '\\`').replace('${', '\\${').replace('"', '\\"').replace('\n', '\\n').replace('\r', '\\r')
    
    # Display results using a simple approach
    display_js = f'''
    <script>
    function showResults() {{
        const loading = document.getElementById('loading');
        const resultsSection = document.getElementById('resultsSection');
        const resultsContent = document.getElementById('resultsContent');
        const analyzeBtn = document.getElementById('analyzeBtn');
        
        if (loading) loading.style.display = 'none';
        if (resultsContent) resultsContent.textContent = "{clean_result}";
        if (resultsSection) resultsSection.style.display = 'block';
        if (analyzeBtn) analyzeBtn.disabled = false;
    }}
    showResults();
    </script>
    '''
    displayHTML(display_js)

# COMMAND ----------

%md
## Interactive MITRE Technique Selector

# COMMAND ----------

html_content = '''
<!DOCTYPE html>
<html>
<head>
    <style>
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 25px;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 30px;
        }
        .section {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 20px;
        }
        .dropdown-container {
            margin-bottom: 20px;
        }
        .dropdown-container label {
            display: block;
            font-weight: bold;
            margin-bottom: 8px;
            color: #2c3e50;
        }
        .dropdown {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 2px solid #bdc3c7;
            border-radius: 8px;
            background: white;
        }
        .dropdown:focus {
            border-color: #3498db;
            outline: none;
        }
        .technique-info {
            background: #e8f4f8;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin: 15px 0;
            border-radius: 0 8px 8px 0;
        }
        .spl-query-box {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            font-family: "Courier New", monospace;
            font-size: 14px;
            line-height: 1.4;
            overflow-x: auto;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
        }
        .analyze-btn {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            font-weight: bold;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 20px 0;
            display: block;
            width: 100%;
        }
        .analyze-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
        }
        .analyze-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
        }
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .results-section {
            display: none;
            background: #ffffff;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            margin-top: 20px;
        }
        .results-header {
            background: linear-gradient(135deg, #8e44ad, #9b59b6);
            color: white;
            padding: 15px 20px;
            font-weight: bold;
            font-size: 18px;
            border-radius: 8px 8px 0 0;
        }
        .results-content {
            padding: 25px;
            max-height: 500px;
            overflow-y: auto;
            white-space: pre-wrap;
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
        }
        .hidden {
            display: none;
        }
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 15px 0;
        }
        .info-item {
            background: white;
            padding: 10px;
            border-radius: 6px;
            border-left: 3px solid #3498db;
        }
        .info-label {
            font-weight: bold;
            color: #2c3e50;
            font-size: 12px;
            text-transform: uppercase;
        }
        .info-value {
            color: #34495e;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è MITRE ATT&CK SPL Query Analyzer</h1>
            <p>Select a MITRE technique to analyze its SPL query</p>
        </div>

        <div class="section">
            <div class="dropdown-container">
                <label for="mitreSelect">üéØ Select MITRE Technique:</label>
                <select id="mitreSelect" class="dropdown" onchange="loadTechniqueData()">
                    <option value="">-- Select a MITRE Technique --</option>
                </select>
            </div>
        </div>

        <div id="techniqueSection" class="section hidden">
            <h3>üìã Technique Information</h3>
            <div class="technique-info">
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Technique Name</div>
                        <div class="info-value" id="techniqueName">-</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Tactic</div>
                        <div class="info-value" id="techniqueTactic">-</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Platform</div>
                        <div class="info-value" id="techniquePlatform">-</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Domain</div>
                        <div class="info-value" id="techniqueDomain">-</div>
                    </div>
                </div>
                <div style="margin-top: 15px;">
                    <div class="info-label">Description</div>
                    <div class="info-value" id="techniqueDescription">-</div>
                </div>
            </div>
        </div>

        <div id="splSection" class="section hidden">
            <h3>üîç SPL Query</h3>
            <div class="spl-query-box" id="splQueryBox">
                Select a MITRE technique to view its SPL query
            </div>
            
            <button class="analyze-btn" id="analyzeBtn" onclick="analyzeWithLLM()" disabled>
                üöÄ Analyze with LLM
            </button>
        </div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>ü§ñ Analyzing SPL query against MITRE ATT&CK framework...</p>
        </div>

        <div class="results-section" id="resultsSection">
            <div class="results-header">
                üéØ LLM Analysis Results
            </div>
            <div class="results-content" id="resultsContent"></div>
        </div>
    </div>

    <script>
        let currentTechniqueData = null;

        function loadTechniqueData() {
            const selectedId = document.getElementById("mitreSelect").value;
            
            if (!selectedId) {
                hideAllSections();
                return;
            }

            // Call Python to get technique data
            if (typeof IPython !== "undefined" && IPython.notebook) {
                IPython.notebook.kernel.execute(`
selected_mitre_id = "${selectedId}"
technique_data = get_technique_data("${selectedId}")
print("Selected technique:", selected_mitre_id)

# Display the technique data safely
if technique_data:
    import json
    data_json = json.dumps(technique_data)
    display_code = f'''<script>displayTechniqueData({data_json});</script>'''
    displayHTML(display_code)
                `);
            }
        }

        function displayTechniqueData(data) {
            if (!data || Object.keys(data).length === 0) {
                console.error("No technique data received");
                return;
            }

            currentTechniqueData = data;

            // Update technique information
            document.getElementById("techniqueName").textContent = data.technique_name || "N/A";
            document.getElementById("techniqueTactic").textContent = data.tactics || "N/A";
            document.getElementById("techniquePlatform").textContent = data.platforms || "N/A";
            document.getElementById("techniqueDomain").textContent = data.domain || "N/A";
            document.getElementById("techniqueDescription").textContent = data.description || "N/A";

            // Update SPL query
            document.getElementById("splQueryBox").textContent = data.spl_query || "No SPL query available";

            // Show sections
            document.getElementById("techniqueSection").classList.remove("hidden");
            document.getElementById("splSection").classList.remove("hidden");
            document.getElementById("analyzeBtn").disabled = false;

            // Hide results from previous analysis
            document.getElementById("resultsSection").style.display = "none";
        }

        function hideAllSections() {
            document.getElementById("techniqueSection").classList.add("hidden");
            document.getElementById("splSection").classList.add("hidden");
            document.getElementById("resultsSection").style.display = "none";
            document.getElementById("analyzeBtn").disabled = true;
        }

        function analyzeWithLLM() {
            if (!currentTechniqueData) {
                alert("Please select a MITRE technique first");
                return;
            }

            // Show loading
            document.getElementById("loading").style.display = "block";
            document.getElementById("resultsSection").style.display = "none";
            document.getElementById("analyzeBtn").disabled = true;

            // Call Python LLM analysis
            if (typeof IPython !== "undefined" && IPython.notebook) {
                IPython.notebook.kernel.execute(`
run_analysis_and_display("${currentTechniqueData.mitre_id}")
                `);
            }
        }
    </script>
</body>
</html>
'''

displayHTML(html_content)

# COMMAND ----------

%md
## Populate Dropdown with MITRE IDs

# COMMAND ----------

# Generate JavaScript to populate the dropdown
js_code = f"""
<script>
const mitreIds = {json.dumps(mitre_id_list)};
const dropdown = document.getElementById('mitreSelect');

if (dropdown) {{
    // Clear existing options except the first one
    dropdown.innerHTML = '<option value="">-- Select a MITRE Technique --</option>';
    
    // Add all MITRE IDs
    mitreIds.forEach(id => {{
        const option = document.createElement('option');
        option.value = id;
        option.textContent = id;
        dropdown.appendChild(option);
    }});
    
    console.log('‚úÖ Loaded ' + mitreIds.length + ' MITRE techniques');
}} else {{
    console.log('‚ö†Ô∏è Dropdown not found, will retry...');
    setTimeout(() => {{
        const retryDropdown = document.getElementById('mitreSelect');
        if (retryDropdown) {{
            retryDropdown.innerHTML = '<option value="">-- Select a MITRE Technique --</option>';
            mitreIds.forEach(id => {{
                const option = document.createElement('option');
                option.value = id;
                option.textContent = id;
                retryDropdown.appendChild(option);
            }});
            console.log('‚úÖ Loaded ' + mitreIds.length + ' MITRE techniques (retry)');
        }}
    }}, 1000);
}}
</script>
"""

displayHTML(js_code)

# COMMAND ----------

%md
## Usage Instructions

1. **Select a MITRE Technique** from the dropdown above
2. **Review the technique information** and SPL query that appears
3. **Click "Analyze with LLM"** to get detailed analysis
4. **Review the results** to understand coverage gaps and recommendations

The system will analyze your SPL queries against the MITRE ATT&CK framework and provide specific recommendations for improving detection coverage.

# COMMAND ----------

%md
## Test Function (Optional)

# COMMAND ----------

# Test the functions with a sample MITRE ID
if len(mitre_id_list) > 0:
    sample_id = mitre_id_list[0]
    print(f"üß™ Testing with sample MITRE ID: {sample_id}")
    
    sample_data = get_technique_data(sample_id)
    print("‚úÖ Sample technique data:")
    for key, value in sample_data.items():
        if key == 'spl_query':
            value_str = str(value)
            if len(value_str) > 100:
                print(f"  {key}: {value_str[:100]}...")
            else:
                print(f"  {key}: {value}")
        else:
            print(f"  {key}: {value}")
else:
    print("‚ö†Ô∏è No MITRE IDs found in table")
